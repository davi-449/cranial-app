{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from 'axios';\nvar geminiApi = axios.create({\n  baseURL: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n    'X-Api-Key': 'AIzaSyDc57MueVt9XPC00RI4ycHN64hviz58v5g'\n  }\n});\ngeminiApi.interceptors.request.use(function (config) {\n  var token = 'AIzaSyDc57MueVt9XPC00RI4ycHN64hviz58v5g';\n  if (token) {\n    config.headers.Authorization = \"Bearer \" + token;\n  }\n  return config;\n});\nexport var sendMessageToGemini = function () {\n  var _ref = _asyncToGenerator(function* (message) {\n    try {\n      var response = yield geminiApi.post('/chat', {\n        message: message\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao enviar mensagem para o Gemini:', error);\n      throw error;\n    }\n  });\n  return function sendMessageToGemini(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport default geminiApi;","map":{"version":3,"names":["axios","geminiApi","create","baseURL","timeout","headers","interceptors","request","use","config","token","Authorization","sendMessageToGemini","_ref","_asyncToGenerator","message","response","post","data","error","console","_x","apply","arguments"],"sources":["C:/Users/Davi/Desktop/projetos/cranial-app/cranial-app/mobile/src/services/geminiApi.ts"],"sourcesContent":["import axios from 'axios';\r\nconst geminiApi = axios.create({\r\n  baseURL: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'X-Api-Key': 'AIzaSyDc57MueVt9XPC00RI4ycHN64hviz58v5g',\r\n  },\r\n});\r\n\r\ngeminiApi.interceptors.request.use((config) => {\r\n  const token = 'AIzaSyDc57MueVt9XPC00RI4ycHN64hviz58v5g'; // Substitua pelo token de autenticação\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport const sendMessageToGemini = async (message: string) => {\r\n  try {\r\n    const response = await geminiApi.post('/chat', { message });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erro ao enviar mensagem para o Gemini:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default geminiApi;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,IAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE,0FAA0F;EACnGC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,WAAW,EAAE;EACf;AACF,CAAC,CAAC;AAEFJ,SAAS,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,UAACC,MAAM,EAAK;EAC7C,IAAMC,KAAK,GAAG,yCAAyC;EACvD,IAAIA,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACM,aAAa,eAAaD,KAAO;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,IAAMG,mBAAmB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,OAAe,EAAK;IAC5D,IAAI;MACF,IAAMC,QAAQ,SAASf,SAAS,CAACgB,IAAI,CAAC,OAAO,EAAE;QAAEF,OAAO,EAAPA;MAAQ,CAAC,CAAC;MAC3D,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAC9D,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,gBARYP,mBAAmBA,CAAAS,EAAA;IAAA,OAAAR,IAAA,CAAAS,KAAA,OAAAC,SAAA;EAAA;AAAA,GAQ/B;AAED,eAAetB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}