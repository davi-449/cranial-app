{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar api = axios.create({\n  baseURL: 'http://localhost:3000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napi.interceptors.request.use(function () {\n  var _ref = _asyncToGenerator(function* (config) {\n    var token = yield AsyncStorage.getItem('@CranialApp:token');\n    if (token) {\n      config.headers.Authorization = \"Bearer \" + token;\n    }\n    return config;\n  });\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}(), function (error) {\n  return Promise.reject(error);\n});\napi.interceptors.response.use(function (response) {\n  return response;\n}, function () {\n  var _ref2 = _asyncToGenerator(function* (error) {\n    if (error.response && error.response.status === 401) {\n      yield AsyncStorage.removeItem('@CranialApp:user');\n      yield AsyncStorage.removeItem('@CranialApp:token');\n    }\n    return Promise.reject(error);\n  });\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nexport default api;","map":{"version":3,"names":["axios","AsyncStorage","api","create","baseURL","headers","interceptors","request","use","_ref","_asyncToGenerator","config","token","getItem","Authorization","_x","apply","arguments","error","Promise","reject","response","_ref2","status","removeItem","_x2"],"sources":["C:/Users/Davi/Desktop/projetos/cranial-app/cranial-app/mobile/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:3000/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Interceptor para adicionar token de autenticação\napi.interceptors.request.use(\n  async (config) => {\n    const token = await AsyncStorage.getItem('@CranialApp:token');\n    \n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    \n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Interceptor para tratamento global de erros\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  async (error) => {\n    // Verificar se o erro é de autenticação (401)\n    if (error.response && error.response.status === 401) {\n      // Limpar dados de autenticação\n      await AsyncStorage.removeItem('@CranialApp:user');\n      await AsyncStorage.removeItem('@CranialApp:token');\n      \n      // Redirecionar para login (isso seria feito pelo contexto de autenticação)\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\nexport default api;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,2CAA2C;AAEpE,IAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAGFH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAC1B,WAAOC,MAAM,EAAK;IAChB,IAAMC,KAAK,SAASX,YAAY,CAACY,OAAO,CAAC,mBAAmB,CAAC;IAE7D,IAAID,KAAK,EAAE;MACTD,MAAM,CAACN,OAAO,CAACS,aAAa,eAAaF,KAAO;IAClD;IAEA,OAAOD,MAAM;EACf,CAAC;EAAA,iBAAAI,EAAA;IAAA,OAAAN,IAAA,CAAAO,KAAA,OAAAC,SAAA;EAAA;AAAA,KACD,UAACC,KAAK,EAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAGDhB,GAAG,CAACI,YAAY,CAACe,QAAQ,CAACb,GAAG,CAC3B,UAACa,QAAQ,EAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC;EAAA,IAAAC,KAAA,GAAAZ,iBAAA,CACD,WAAOQ,KAAK,EAAK;IAEf,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;MAEnD,MAAMtB,YAAY,CAACuB,UAAU,CAAC,kBAAkB,CAAC;MACjD,MAAMvB,YAAY,CAACuB,UAAU,CAAC,mBAAmB,CAAC;IAGpD;IAEA,OAAOL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;EAC9B,CAAC;EAAA,iBAAAO,GAAA;IAAA,OAAAH,KAAA,CAAAN,KAAA,OAAAC,SAAA;EAAA;AAAA,GACH,CAAC;AAED,eAAef,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}