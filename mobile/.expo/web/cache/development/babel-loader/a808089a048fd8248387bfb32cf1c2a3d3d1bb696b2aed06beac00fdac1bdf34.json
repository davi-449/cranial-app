{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar PatientContext = createContext(undefined);\nexport var PatientProvider = function PatientProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedPatient = _useState2[0],\n    setSelectedPatient = _useState2[1];\n  return _jsx(PatientContext.Provider, {\n    value: {\n      selectedPatient: selectedPatient,\n      setSelectedPatient: setSelectedPatient\n    },\n    children: children\n  });\n};\nexport var usePatient = function usePatient() {\n  var context = useContext(PatientContext);\n  if (!context) {\n    throw new Error('usePatient must be used within a PatientProvider');\n  }\n  return context;\n};","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","PatientContext","undefined","PatientProvider","_ref","children","_useState","_useState2","_slicedToArray","selectedPatient","setSelectedPatient","Provider","value","usePatient","context","Error"],"sources":["C:/Users/Davi/Desktop/projetos/cranial-app/cranial-app/mobile/src/contexts/PatientContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\r\n\r\ninterface Patient {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\ninterface PatientContextData {\r\n  selectedPatient: Patient | null;\r\n  setSelectedPatient: (patient: Patient | null) => void;\r\n}\r\n\r\nconst PatientContext = createContext<PatientContextData | undefined>(undefined);\r\n\r\nexport const PatientProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);\r\n\r\n  return (\r\n    <PatientContext.Provider value={{ selectedPatient, setSelectedPatient }}>\r\n      {children}\r\n    </PatientContext.Provider>\r\n  );\r\n};\r\n\r\nexport const usePatient = (): PatientContextData => {\r\n  const context = useContext(PatientContext);\r\n  if (!context) {\r\n    throw new Error('usePatient must be used within a PatientProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAY9E,IAAMC,cAAc,GAAGL,aAAa,CAAiCM,SAAS,CAAC;AAE/E,OAAO,IAAMC,eAAkD,GAAG,SAArDA,eAAkDA,CAAAC,IAAA,EAAqB;EAAA,IAAfC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EAC3E,IAAAC,SAAA,GAA8CR,QAAQ,CAAiB,IAAI,CAAC;IAAAS,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArEG,eAAe,GAAAF,UAAA;IAAEG,kBAAkB,GAAAH,UAAA;EAE1C,OACEP,IAAA,CAACC,cAAc,CAACU,QAAQ;IAACC,KAAK,EAAE;MAAEH,eAAe,EAAfA,eAAe;MAAEC,kBAAkB,EAAlBA;IAAmB,CAAE;IAAAL,QAAA,EACrEA;EAAQ,CACc,CAAC;AAE9B,CAAC;AAED,OAAO,IAAMQ,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAA6B;EAClD,IAAMC,OAAO,GAAGjB,UAAU,CAACI,cAAc,CAAC;EAC1C,IAAI,CAACa,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;EACrE;EACA,OAAOD,OAAO;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}