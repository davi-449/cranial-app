{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useState, useContext } from 'react';\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport api from \"../services/api\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar ApiContext = createContext({});\nexport var ApiProvider = function ApiProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    loading = _useState2[0],\n    setLoading = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    error = _useState4[0],\n    setError = _useState4[1];\n  var clearError = function clearError() {\n    setError(null);\n  };\n  var handleRequest = function () {\n    var _ref2 = _asyncToGenerator(function* (key, request) {\n      var forceRefresh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      setLoading(true);\n      setError(null);\n      try {\n        var cachedData = yield AsyncStorage.getItem(\"@CranialApp:\" + key);\n        if (!forceRefresh && cachedData) {\n          setLoading(false);\n          return JSON.parse(cachedData);\n        }\n        var response = yield request();\n        yield AsyncStorage.setItem(\"@CranialApp:\" + key, JSON.stringify(response.data));\n        setLoading(false);\n        return response.data;\n      } catch (err) {\n        if (!navigator.onLine) {\n          var _cachedData = yield AsyncStorage.getItem(\"@CranialApp:\" + key);\n          if (_cachedData) {\n            setLoading(false);\n            return JSON.parse(_cachedData);\n          }\n        }\n        if (axios.isAxiosError(err)) {\n          var _err$response, _err$response$data;\n          setError(((_err$response = err.response) == null ? void 0 : (_err$response$data = _err$response.data) == null ? void 0 : _err$response$data.message) || 'Erro na comunicação com o servidor');\n        } else {\n          setError('Ocorreu um erro inesperado');\n        }\n        setLoading(false);\n        throw err;\n      }\n    });\n    return function handleRequest(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var getPatients = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      return handleRequest('patients', function () {\n        return api.get('/patients');\n      });\n    });\n    return function getPatients() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var getPatient = function () {\n    var _ref4 = _asyncToGenerator(function* (id) {\n      return handleRequest(\"patient_\" + id, function () {\n        return api.get(\"/patients/\" + id);\n      });\n    });\n    return function getPatient(_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var createPatient = function () {\n    var _ref5 = _asyncToGenerator(function* (data) {\n      setLoading(true);\n      setError(null);\n      try {\n        var response = yield api.post('/patients', data);\n        var patients = yield getPatients();\n        yield AsyncStorage.setItem('@CranialApp:patients', JSON.stringify([].concat(_toConsumableArray(patients), [response.data])));\n        setLoading(false);\n        return response.data;\n      } catch (err) {\n        if (axios.isAxiosError(err)) {\n          var _err$response2, _err$response2$data;\n          setError(((_err$response2 = err.response) == null ? void 0 : (_err$response2$data = _err$response2.data) == null ? void 0 : _err$response2$data.message) || 'Erro ao criar paciente');\n        } else {\n          setError('Ocorreu um erro inesperado');\n        }\n        setLoading(false);\n        throw err;\n      }\n    });\n    return function createPatient(_x4) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var updatePatient = function () {\n    var _ref6 = _asyncToGenerator(function* (id, data) {\n      setLoading(true);\n      setError(null);\n      try {\n        var response = yield api.put(\"/patients/\" + id, data);\n        yield AsyncStorage.setItem(\"@CranialApp:patient_\" + id, JSON.stringify(response.data));\n        yield AsyncStorage.removeItem('@CranialApp:patients');\n        setLoading(false);\n        return response.data;\n      } catch (err) {\n        if (axios.isAxiosError(err)) {\n          var _err$response3, _err$response3$data;\n          setError(((_err$response3 = err.response) == null ? void 0 : (_err$response3$data = _err$response3.data) == null ? void 0 : _err$response3$data.message) || 'Erro ao atualizar paciente');\n        } else {\n          setError('Ocorreu um erro inesperado');\n        }\n        setLoading(false);\n        throw err;\n      }\n    });\n    return function updatePatient(_x5, _x6) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var deletePatient = function () {\n    var _ref7 = _asyncToGenerator(function* (id) {\n      setLoading(true);\n      setError(null);\n      try {\n        yield api.delete(\"/patients/\" + id);\n        yield AsyncStorage.removeItem(\"@CranialApp:patient_\" + id);\n        yield AsyncStorage.removeItem('@CranialApp:patients');\n        setLoading(false);\n      } catch (err) {\n        if (axios.isAxiosError(err)) {\n          var _err$response4, _err$response4$data;\n          setError(((_err$response4 = err.response) == null ? void 0 : (_err$response4$data = _err$response4.data) == null ? void 0 : _err$response4$data.message) || 'Erro ao excluir paciente');\n        } else {\n          setError('Ocorreu um erro inesperado');\n        }\n        setLoading(false);\n        throw err;\n      }\n    });\n    return function deletePatient(_x7) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  var addMeasurement = function () {\n    var _ref8 = _asyncToGenerator(function* (patientId, data) {\n      setLoading(true);\n      setError(null);\n      try {\n        var response = yield api.post(\"/patients/\" + patientId + \"/measurements\", data);\n        yield AsyncStorage.removeItem(\"@CranialApp:patient_\" + patientId);\n        setLoading(false);\n        return response.data;\n      } catch (err) {\n        if (axios.isAxiosError(err)) {\n          var _err$response5, _err$response5$data;\n          setError(((_err$response5 = err.response) == null ? void 0 : (_err$response5$data = _err$response5.data) == null ? void 0 : _err$response5$data.message) || 'Erro ao adicionar medição');\n        } else {\n          setError('Ocorreu um erro inesperado');\n        }\n        setLoading(false);\n        throw err;\n      }\n    });\n    return function addMeasurement(_x8, _x9) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  var getPatientReport = function () {\n    var _ref9 = _asyncToGenerator(function* (patientId) {\n      return handleRequest(\"patient_\" + patientId + \"_report\", function () {\n        return api.get(\"/patients/\" + patientId + \"/report\");\n      });\n    });\n    return function getPatientReport(_x10) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n  return _jsx(ApiContext.Provider, {\n    value: {\n      loading: loading,\n      error: error,\n      clearError: clearError,\n      getPatients: getPatients,\n      getPatient: getPatient,\n      createPatient: createPatient,\n      updatePatient: updatePatient,\n      deletePatient: deletePatient,\n      addMeasurement: addMeasurement,\n      getPatientReport: getPatientReport\n    },\n    children: children\n  });\n};\nexport function useApi() {\n  var context = useContext(ApiContext);\n  if (!context) {\n    throw new Error('useApi must be used within an ApiProvider');\n  }\n  return context;\n}","map":{"version":3,"names":["React","createContext","useState","useContext","axios","AsyncStorage","api","jsx","_jsx","ApiContext","ApiProvider","_ref","children","_useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","clearError","handleRequest","_ref2","_asyncToGenerator","key","request","forceRefresh","arguments","length","undefined","cachedData","getItem","JSON","parse","response","setItem","stringify","data","err","navigator","onLine","isAxiosError","_err$response","_err$response$data","message","_x","_x2","apply","getPatients","_ref3","get","getPatient","_ref4","id","_x3","createPatient","_ref5","post","patients","concat","_toConsumableArray","_err$response2","_err$response2$data","_x4","updatePatient","_ref6","put","removeItem","_err$response3","_err$response3$data","_x5","_x6","deletePatient","_ref7","delete","_err$response4","_err$response4$data","_x7","addMeasurement","_ref8","patientId","_err$response5","_err$response5$data","_x8","_x9","getPatientReport","_ref9","_x10","Provider","value","useApi","context","Error"],"sources":["C:/Users/Davi/Desktop/projetos/cranial-app/cranial-app/mobile/src/contexts/ApiContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport api from '../services/api';\n\ninterface ApiContextData {\n  loading: boolean;\n  error: string | null;\n  clearError(): void;\n  getPatients(): Promise<any[]>;\n  getPatient(id: number): Promise<any>;\n  createPatient(data: any): Promise<any>;\n  updatePatient(id: number, data: any): Promise<any>;\n  deletePatient(id: number): Promise<void>;\n  addMeasurement(patientId: number, data: any): Promise<any>;\n  getPatientReport(patientId: number): Promise<any>;\n}\n\nconst ApiContext = createContext<ApiContextData>({} as ApiContextData);\n\nexport const ApiProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  // Função para lidar com requisições com cache offline\n  const handleRequest = async (\n    key: string,\n    request: () => Promise<any>,\n    forceRefresh = false\n  ) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // Verificar se há dados em cache\n      const cachedData = await AsyncStorage.getItem(`@CranialApp:${key}`);\n      \n      // Se não forçar atualização e tiver cache, retorna o cache\n      if (!forceRefresh && cachedData) {\n        setLoading(false);\n        return JSON.parse(cachedData);\n      }\n\n      // Fazer a requisição\n      const response = await request();\n      \n      // Salvar no cache\n      await AsyncStorage.setItem(`@CranialApp:${key}`, JSON.stringify(response.data));\n      \n      setLoading(false);\n      return response.data;\n    } catch (err) {\n      // Se estiver offline e tiver cache, usa o cache\n      if (!navigator.onLine) {\n        const cachedData = await AsyncStorage.getItem(`@CranialApp:${key}`);\n        if (cachedData) {\n          setLoading(false);\n          return JSON.parse(cachedData);\n        }\n      }\n\n      // Tratar erro\n      if (axios.isAxiosError(err)) {\n        setError(err.response?.data?.message || 'Erro na comunicação com o servidor');\n      } else {\n        setError('Ocorreu um erro inesperado');\n      }\n      \n      setLoading(false);\n      throw err;\n    }\n  };\n\n  // Funções de API\n  const getPatients = async () => {\n    return handleRequest('patients', () => api.get('/patients'));\n  };\n\n  const getPatient = async (id: number) => {\n    return handleRequest(`patient_${id}`, () => api.get(`/patients/${id}`));\n  };\n\n  const createPatient = async (data: any) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await api.post('/patients', data);\n      \n      // Invalidar cache de listagem\n      const patients = await getPatients();\n      await AsyncStorage.setItem('@CranialApp:patients', JSON.stringify([...patients, response.data]));\n      \n      setLoading(false);\n      return response.data;\n    } catch (err) {\n      if (axios.isAxiosError(err)) {\n        setError(err.response?.data?.message || 'Erro ao criar paciente');\n      } else {\n        setError('Ocorreu um erro inesperado');\n      }\n      \n      setLoading(false);\n      throw err;\n    }\n  };\n\n  const updatePatient = async (id: number, data: any) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await api.put(`/patients/${id}`, data);\n      \n      // Atualizar cache\n      await AsyncStorage.setItem(`@CranialApp:patient_${id}`, JSON.stringify(response.data));\n      \n      // Invalidar cache de listagem\n      await AsyncStorage.removeItem('@CranialApp:patients');\n      \n      setLoading(false);\n      return response.data;\n    } catch (err) {\n      if (axios.isAxiosError(err)) {\n        setError(err.response?.data?.message || 'Erro ao atualizar paciente');\n      } else {\n        setError('Ocorreu um erro inesperado');\n      }\n      \n      setLoading(false);\n      throw err;\n    }\n  };\n\n  const deletePatient = async (id: number) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      await api.delete(`/patients/${id}`);\n      \n      // Remover do cache\n      await AsyncStorage.removeItem(`@CranialApp:patient_${id}`);\n      \n      // Invalidar cache de listagem\n      await AsyncStorage.removeItem('@CranialApp:patients');\n      \n      setLoading(false);\n    } catch (err) {\n      if (axios.isAxiosError(err)) {\n        setError(err.response?.data?.message || 'Erro ao excluir paciente');\n      } else {\n        setError('Ocorreu um erro inesperado');\n      }\n      \n      setLoading(false);\n      throw err;\n    }\n  };\n\n  const addMeasurement = async (patientId: number, data: any) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await api.post(`/patients/${patientId}/measurements`, data);\n      \n      // Invalidar cache do paciente\n      await AsyncStorage.removeItem(`@CranialApp:patient_${patientId}`);\n      \n      setLoading(false);\n      return response.data;\n    } catch (err) {\n      if (axios.isAxiosError(err)) {\n        setError(err.response?.data?.message || 'Erro ao adicionar medição');\n      } else {\n        setError('Ocorreu um erro inesperado');\n      }\n      \n      setLoading(false);\n      throw err;\n    }\n  };\n\n  const getPatientReport = async (patientId: number) => {\n    return handleRequest(`patient_${patientId}_report`, () => \n      api.get(`/patients/${patientId}/report`)\n    );\n  };\n\n  return (\n    <ApiContext.Provider\n      value={{\n        loading,\n        error,\n        clearError,\n        getPatients,\n        getPatient,\n        createPatient,\n        updatePatient,\n        deletePatient,\n        addMeasurement,\n        getPatientReport,\n      }}\n    >\n      {children}\n    </ApiContext.Provider>\n  );\n};\n\nexport function useApi() {\n  const context = useContext(ApiContext);\n\n  if (!context) {\n    throw new Error('useApi must be used within an ApiProvider');\n  }\n\n  return context;\n}\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAClE,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,2CAA2C;AACpE,OAAOC,GAAG;AAAwB,SAAAC,GAAA,IAAAC,IAAA;AAelC,IAAMC,UAAU,GAAGR,aAAa,CAAiB,CAAC,CAAmB,CAAC;AAEtE,OAAO,IAAMS,WAAoD,GAAG,SAAvDA,WAAoDA,CAAAC,IAAA,EAAqB;EAAA,IAAfC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EAC7E,IAAAC,SAAA,GAA8BX,QAAQ,CAAC,KAAK,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAtCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAC1B,IAAAI,UAAA,GAA0BhB,QAAQ,CAAgB,IAAI,CAAC;IAAAiB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAhDE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EAEtB,IAAMG,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;IACvBD,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC;EAGD,IAAME,aAAa;IAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,WACpBC,GAAW,EACXC,OAA2B,EAExB;MAAA,IADHC,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;MAEpBZ,UAAU,CAAC,IAAI,CAAC;MAChBI,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QAEF,IAAMW,UAAU,SAAS3B,YAAY,CAAC4B,OAAO,kBAAgBP,GAAK,CAAC;QAGnE,IAAI,CAACE,YAAY,IAAII,UAAU,EAAE;UAC/Bf,UAAU,CAAC,KAAK,CAAC;UACjB,OAAOiB,IAAI,CAACC,KAAK,CAACH,UAAU,CAAC;QAC/B;QAGA,IAAMI,QAAQ,SAAST,OAAO,CAAC,CAAC;QAGhC,MAAMtB,YAAY,CAACgC,OAAO,kBAAgBX,GAAG,EAAIQ,IAAI,CAACI,SAAS,CAACF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAE/EtB,UAAU,CAAC,KAAK,CAAC;QACjB,OAAOmB,QAAQ,CAACG,IAAI;MACtB,CAAC,CAAC,OAAOC,GAAG,EAAE;QAEZ,IAAI,CAACC,SAAS,CAACC,MAAM,EAAE;UACrB,IAAMV,WAAU,SAAS3B,YAAY,CAAC4B,OAAO,kBAAgBP,GAAK,CAAC;UACnE,IAAIM,WAAU,EAAE;YACdf,UAAU,CAAC,KAAK,CAAC;YACjB,OAAOiB,IAAI,CAACC,KAAK,CAACH,WAAU,CAAC;UAC/B;QACF;QAGA,IAAI5B,KAAK,CAACuC,YAAY,CAACH,GAAG,CAAC,EAAE;UAAA,IAAAI,aAAA,EAAAC,kBAAA;UAC3BxB,QAAQ,CAAC,EAAAuB,aAAA,GAAAJ,GAAG,CAACJ,QAAQ,sBAAAS,kBAAA,GAAZD,aAAA,CAAcL,IAAI,qBAAlBM,kBAAA,CAAoBC,OAAO,KAAI,oCAAoC,CAAC;QAC/E,CAAC,MAAM;UACLzB,QAAQ,CAAC,4BAA4B,CAAC;QACxC;QAEAJ,UAAU,CAAC,KAAK,CAAC;QACjB,MAAMuB,GAAG;MACX;IACF,CAAC;IAAA,gBA9CKjB,aAAaA,CAAAwB,EAAA,EAAAC,GAAA;MAAA,OAAAxB,KAAA,CAAAyB,KAAA,OAAApB,SAAA;IAAA;EAAA,GA8ClB;EAGD,IAAMqB,WAAW;IAAA,IAAAC,KAAA,GAAA1B,iBAAA,CAAG,aAAY;MAC9B,OAAOF,aAAa,CAAC,UAAU,EAAE;QAAA,OAAMjB,GAAG,CAAC8C,GAAG,CAAC,WAAW,CAAC;MAAA,EAAC;IAC9D,CAAC;IAAA,gBAFKF,WAAWA,CAAA;MAAA,OAAAC,KAAA,CAAAF,KAAA,OAAApB,SAAA;IAAA;EAAA,GAEhB;EAED,IAAMwB,UAAU;IAAA,IAAAC,KAAA,GAAA7B,iBAAA,CAAG,WAAO8B,EAAU,EAAK;MACvC,OAAOhC,aAAa,cAAYgC,EAAE,EAAI;QAAA,OAAMjD,GAAG,CAAC8C,GAAG,gBAAcG,EAAI,CAAC;MAAA,EAAC;IACzE,CAAC;IAAA,gBAFKF,UAAUA,CAAAG,GAAA;MAAA,OAAAF,KAAA,CAAAL,KAAA,OAAApB,SAAA;IAAA;EAAA,GAEf;EAED,IAAM4B,aAAa;IAAA,IAAAC,KAAA,GAAAjC,iBAAA,CAAG,WAAOc,IAAS,EAAK;MACzCtB,UAAU,CAAC,IAAI,CAAC;MAChBI,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACF,IAAMe,QAAQ,SAAS9B,GAAG,CAACqD,IAAI,CAAC,WAAW,EAAEpB,IAAI,CAAC;QAGlD,IAAMqB,QAAQ,SAASV,WAAW,CAAC,CAAC;QACpC,MAAM7C,YAAY,CAACgC,OAAO,CAAC,sBAAsB,EAAEH,IAAI,CAACI,SAAS,IAAAuB,MAAA,CAAAC,kBAAA,CAAKF,QAAQ,IAAExB,QAAQ,CAACG,IAAI,EAAC,CAAC,CAAC;QAEhGtB,UAAU,CAAC,KAAK,CAAC;QACjB,OAAOmB,QAAQ,CAACG,IAAI;MACtB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZ,IAAIpC,KAAK,CAACuC,YAAY,CAACH,GAAG,CAAC,EAAE;UAAA,IAAAuB,cAAA,EAAAC,mBAAA;UAC3B3C,QAAQ,CAAC,EAAA0C,cAAA,GAAAvB,GAAG,CAACJ,QAAQ,sBAAA4B,mBAAA,GAAZD,cAAA,CAAcxB,IAAI,qBAAlByB,mBAAA,CAAoBlB,OAAO,KAAI,wBAAwB,CAAC;QACnE,CAAC,MAAM;UACLzB,QAAQ,CAAC,4BAA4B,CAAC;QACxC;QAEAJ,UAAU,CAAC,KAAK,CAAC;QACjB,MAAMuB,GAAG;MACX;IACF,CAAC;IAAA,gBAvBKiB,aAAaA,CAAAQ,GAAA;MAAA,OAAAP,KAAA,CAAAT,KAAA,OAAApB,SAAA;IAAA;EAAA,GAuBlB;EAED,IAAMqC,aAAa;IAAA,IAAAC,KAAA,GAAA1C,iBAAA,CAAG,WAAO8B,EAAU,EAAEhB,IAAS,EAAK;MACrDtB,UAAU,CAAC,IAAI,CAAC;MAChBI,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACF,IAAMe,QAAQ,SAAS9B,GAAG,CAAC8D,GAAG,gBAAcb,EAAE,EAAIhB,IAAI,CAAC;QAGvD,MAAMlC,YAAY,CAACgC,OAAO,0BAAwBkB,EAAE,EAAIrB,IAAI,CAACI,SAAS,CAACF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAGtF,MAAMlC,YAAY,CAACgE,UAAU,CAAC,sBAAsB,CAAC;QAErDpD,UAAU,CAAC,KAAK,CAAC;QACjB,OAAOmB,QAAQ,CAACG,IAAI;MACtB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZ,IAAIpC,KAAK,CAACuC,YAAY,CAACH,GAAG,CAAC,EAAE;UAAA,IAAA8B,cAAA,EAAAC,mBAAA;UAC3BlD,QAAQ,CAAC,EAAAiD,cAAA,GAAA9B,GAAG,CAACJ,QAAQ,sBAAAmC,mBAAA,GAAZD,cAAA,CAAc/B,IAAI,qBAAlBgC,mBAAA,CAAoBzB,OAAO,KAAI,4BAA4B,CAAC;QACvE,CAAC,MAAM;UACLzB,QAAQ,CAAC,4BAA4B,CAAC;QACxC;QAEAJ,UAAU,CAAC,KAAK,CAAC;QACjB,MAAMuB,GAAG;MACX;IACF,CAAC;IAAA,gBAzBK0B,aAAaA,CAAAM,GAAA,EAAAC,GAAA;MAAA,OAAAN,KAAA,CAAAlB,KAAA,OAAApB,SAAA;IAAA;EAAA,GAyBlB;EAED,IAAM6C,aAAa;IAAA,IAAAC,KAAA,GAAAlD,iBAAA,CAAG,WAAO8B,EAAU,EAAK;MAC1CtC,UAAU,CAAC,IAAI,CAAC;MAChBI,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACF,MAAMf,GAAG,CAACsE,MAAM,gBAAcrB,EAAI,CAAC;QAGnC,MAAMlD,YAAY,CAACgE,UAAU,0BAAwBd,EAAI,CAAC;QAG1D,MAAMlD,YAAY,CAACgE,UAAU,CAAC,sBAAsB,CAAC;QAErDpD,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOuB,GAAG,EAAE;QACZ,IAAIpC,KAAK,CAACuC,YAAY,CAACH,GAAG,CAAC,EAAE;UAAA,IAAAqC,cAAA,EAAAC,mBAAA;UAC3BzD,QAAQ,CAAC,EAAAwD,cAAA,GAAArC,GAAG,CAACJ,QAAQ,sBAAA0C,mBAAA,GAAZD,cAAA,CAActC,IAAI,qBAAlBuC,mBAAA,CAAoBhC,OAAO,KAAI,0BAA0B,CAAC;QACrE,CAAC,MAAM;UACLzB,QAAQ,CAAC,4BAA4B,CAAC;QACxC;QAEAJ,UAAU,CAAC,KAAK,CAAC;QACjB,MAAMuB,GAAG;MACX;IACF,CAAC;IAAA,gBAxBKkC,aAAaA,CAAAK,GAAA;MAAA,OAAAJ,KAAA,CAAA1B,KAAA,OAAApB,SAAA;IAAA;EAAA,GAwBlB;EAED,IAAMmD,cAAc;IAAA,IAAAC,KAAA,GAAAxD,iBAAA,CAAG,WAAOyD,SAAiB,EAAE3C,IAAS,EAAK;MAC7DtB,UAAU,CAAC,IAAI,CAAC;MAChBI,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACF,IAAMe,QAAQ,SAAS9B,GAAG,CAACqD,IAAI,gBAAcuB,SAAS,oBAAiB3C,IAAI,CAAC;QAG5E,MAAMlC,YAAY,CAACgE,UAAU,0BAAwBa,SAAW,CAAC;QAEjEjE,UAAU,CAAC,KAAK,CAAC;QACjB,OAAOmB,QAAQ,CAACG,IAAI;MACtB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZ,IAAIpC,KAAK,CAACuC,YAAY,CAACH,GAAG,CAAC,EAAE;UAAA,IAAA2C,cAAA,EAAAC,mBAAA;UAC3B/D,QAAQ,CAAC,EAAA8D,cAAA,GAAA3C,GAAG,CAACJ,QAAQ,sBAAAgD,mBAAA,GAAZD,cAAA,CAAc5C,IAAI,qBAAlB6C,mBAAA,CAAoBtC,OAAO,KAAI,2BAA2B,CAAC;QACtE,CAAC,MAAM;UACLzB,QAAQ,CAAC,4BAA4B,CAAC;QACxC;QAEAJ,UAAU,CAAC,KAAK,CAAC;QACjB,MAAMuB,GAAG;MACX;IACF,CAAC;IAAA,gBAtBKwC,cAAcA,CAAAK,GAAA,EAAAC,GAAA;MAAA,OAAAL,KAAA,CAAAhC,KAAA,OAAApB,SAAA;IAAA;EAAA,GAsBnB;EAED,IAAM0D,gBAAgB;IAAA,IAAAC,KAAA,GAAA/D,iBAAA,CAAG,WAAOyD,SAAiB,EAAK;MACpD,OAAO3D,aAAa,cAAY2D,SAAS,cAAW;QAAA,OAClD5E,GAAG,CAAC8C,GAAG,gBAAc8B,SAAS,YAAS,CAAC;MAAA,CAC1C,CAAC;IACH,CAAC;IAAA,gBAJKK,gBAAgBA,CAAAE,IAAA;MAAA,OAAAD,KAAA,CAAAvC,KAAA,OAAApB,SAAA;IAAA;EAAA,GAIrB;EAED,OACErB,IAAA,CAACC,UAAU,CAACiF,QAAQ;IAClBC,KAAK,EAAE;MACL3E,OAAO,EAAPA,OAAO;MACPI,KAAK,EAALA,KAAK;MACLE,UAAU,EAAVA,UAAU;MACV4B,WAAW,EAAXA,WAAW;MACXG,UAAU,EAAVA,UAAU;MACVI,aAAa,EAAbA,aAAa;MACbS,aAAa,EAAbA,aAAa;MACbQ,aAAa,EAAbA,aAAa;MACbM,cAAc,EAAdA,cAAc;MACdO,gBAAgB,EAAhBA;IACF,CAAE;IAAA3E,QAAA,EAEDA;EAAQ,CACU,CAAC;AAE1B,CAAC;AAED,OAAO,SAASgF,MAAMA,CAAA,EAAG;EACvB,IAAMC,OAAO,GAAG1F,UAAU,CAACM,UAAU,CAAC;EAEtC,IAAI,CAACoF,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;EAC9D;EAEA,OAAOD,OAAO;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}