{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _require = require(\"@google/generative-ai\"),\n  GoogleGenerativeAI = _require.GoogleGenerativeAI;\nvar genAI = new GoogleGenerativeAI(process.env.API_KEY);\nvar model = genAI.getGenerativeModel({\n  model: \"gemini-1.5-flash\"\n});\nexport var sendMessageToGemini = function () {\n  var _ref = _asyncToGenerator(function* (message) {\n    try {\n      var response = yield model.generateMessage({\n        prompt: {\n          messages: [{\n            author: \"user\",\n            content: message\n          }]\n        }\n      });\n      return response.candidates[0].content;\n    } catch (error) {\n      console.error(\"Erro ao se comunicar com a API GenAI:\", error);\n      throw error;\n    }\n  });\n  return function sendMessageToGemini(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["_require","require","GoogleGenerativeAI","genAI","process","env","API_KEY","model","getGenerativeModel","sendMessageToGemini","_ref","_asyncToGenerator","message","response","generateMessage","prompt","messages","author","content","candidates","error","console","_x","apply","arguments"],"sources":["C:/Users/Davi/Desktop/projetos/cranial-app/cranial-app/mobile/src/services/geminiApi.ts"],"sourcesContent":["const { GoogleGenerativeAI } = require(\"@google/generative-ai\");\r\n\r\n// Inicializa o cliente da API GenAI com a chave de API do ambiente\r\nconst genAI = new GoogleGenerativeAI(process.env.API_KEY);\r\n\r\n// Obtém o modelo generativo Gemini 1.5\r\nconst model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\r\n\r\n// Função para enviar mensagens ao modelo Gemini\r\nexport const sendMessageToGemini = async (message: string) => {\r\n  try {\r\n    // Faz a chamada ao modelo Gemini\r\n    const response = await model.generateMessage({\r\n      prompt: {\r\n        messages: [\r\n          {\r\n            author: \"user\",\r\n            content: message,\r\n          },\r\n        ],\r\n      },\r\n    });\r\n\r\n    // Retorna o texto gerado pelo modelo\r\n    return response.candidates[0].content; // Certifique-se de que este campo existe na resposta\r\n  } catch (error) {\r\n    console.error(\"Erro ao se comunicar com a API GenAI:\", error);\r\n    throw error;\r\n  }\r\n};"],"mappings":";AAAA,IAAAA,QAAA,GAA+BC,OAAO,CAAC,uBAAuB,CAAC;EAAvDC,kBAAkB,GAAAF,QAAA,CAAlBE,kBAAkB;AAG1B,IAAMC,KAAK,GAAG,IAAID,kBAAkB,CAACE,OAAO,CAACC,GAAG,CAACC,OAAO,CAAC;AAGzD,IAAMC,KAAK,GAAGJ,KAAK,CAACK,kBAAkB,CAAC;EAAED,KAAK,EAAE;AAAmB,CAAC,CAAC;AAGrE,OAAO,IAAME,mBAAmB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,OAAe,EAAK;IAC5D,IAAI;MAEF,IAAMC,QAAQ,SAASN,KAAK,CAACO,eAAe,CAAC;QAC3CC,MAAM,EAAE;UACNC,QAAQ,EAAE,CACR;YACEC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAEN;UACX,CAAC;QAEL;MACF,CAAC,CAAC;MAGF,OAAOC,QAAQ,CAACM,UAAU,CAAC,CAAC,CAAC,CAACD,OAAO;IACvC,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC7D,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,gBApBYX,mBAAmBA,CAAAa,EAAA;IAAA,OAAAZ,IAAA,CAAAa,KAAA,OAAAC,SAAA;EAAA;AAAA,GAoB/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}