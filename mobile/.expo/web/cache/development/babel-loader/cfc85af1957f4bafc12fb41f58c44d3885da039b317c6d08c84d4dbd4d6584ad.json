{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useRoute } from '@react-navigation/native';\nimport { useApi } from \"../contexts/ApiContext\";\nimport { jsxs as _jsxs, jsx as _jsx } from \"react/jsx-runtime\";\nvar EvolutionScreen = function EvolutionScreen() {\n  var route = useRoute();\n  var _ref = route.params,\n    patientId = _ref.patientId;\n  var _useApi = useApi(),\n    getPatientMeasurements = _useApi.getPatientMeasurements;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    measurements = _useState2[0],\n    setMeasurements = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  useEffect(function () {\n    loadMeasurements();\n  }, [patientId]);\n  var loadMeasurements = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        setLoading(true);\n        var data = yield getPatientMeasurements(patientId);\n        setMeasurements(data);\n      } catch (error) {\n        Alert.alert('Erro', 'Não foi possível carregar as medições do paciente');\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function loadMeasurements() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var renderMeasurement = function renderMeasurement(_ref3) {\n    var item = _ref3.item;\n    return _jsxs(View, {\n      style: styles.measurementItem,\n      children: [_jsxs(Text, {\n        style: styles.measurementDate,\n        children: [\"Data: \", item.date]\n      }), _jsxs(Text, {\n        children: [\"Largura: \", item.width, \" mm\"]\n      }), _jsxs(Text, {\n        children: [\"Comprimento: \", item.length, \" mm\"]\n      }), _jsxs(Text, {\n        children: [\"Diagonal A: \", item.diagonalA, \" mm\"]\n      }), _jsxs(Text, {\n        children: [\"Diagonal B: \", item.diagonalB, \" mm\"]\n      })]\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Evolu\\xE7\\xE3o das Medi\\xE7\\xF5es\"\n    }), loading ? _jsx(ActivityIndicator, {\n      size: \"large\",\n      color: \"#6200ee\"\n    }) : _jsx(FlatList, {\n      data: measurements,\n      keyExtractor: function keyExtractor(item) {\n        return item.id.toString();\n      },\n      renderItem: renderMeasurement,\n      contentContainerStyle: styles.listContainer,\n      ListEmptyComponent: _jsx(Text, {\n        style: styles.emptyText,\n        children: \"Nenhuma medi\\xE7\\xE3o encontrada\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: '#fff'\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 16,\n    color: '#6200ee'\n  },\n  listContainer: {\n    paddingBottom: 16\n  },\n  measurementItem: {\n    padding: 16,\n    marginBottom: 12,\n    backgroundColor: '#f9f9f9',\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#ddd'\n  },\n  measurementDate: {\n    fontWeight: 'bold',\n    marginBottom: 8\n  },\n  emptyText: {\n    textAlign: 'center',\n    color: '#888',\n    marginTop: 20\n  }\n});\nexport default EvolutionScreen;","map":{"version":3,"names":["React","useEffect","useState","View","Text","StyleSheet","FlatList","ActivityIndicator","Alert","useRoute","useApi","jsxs","_jsxs","jsx","_jsx","EvolutionScreen","route","_ref","params","patientId","_useApi","getPatientMeasurements","_useState","_useState2","_slicedToArray","measurements","setMeasurements","_useState3","_useState4","loading","setLoading","loadMeasurements","_ref2","_asyncToGenerator","data","error","alert","apply","arguments","renderMeasurement","_ref3","item","style","styles","measurementItem","children","measurementDate","date","width","length","diagonalA","diagonalB","container","title","size","color","keyExtractor","id","toString","renderItem","contentContainerStyle","listContainer","ListEmptyComponent","emptyText","create","flex","padding","backgroundColor","fontSize","fontWeight","marginBottom","paddingBottom","borderRadius","borderWidth","borderColor","textAlign","marginTop"],"sources":["C:/Users/Davi/Desktop/projetos/cranial-app/cranial-app/mobile/src/screens/EvolutionScreen.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, StyleSheet, FlatList, ActivityIndicator, Alert } from 'react-native';\r\nimport { useRoute } from '@react-navigation/native';\r\nimport { useApi } from '../contexts/ApiContext';\r\n\r\ninterface RouteParams {\r\n  patientId: number;\r\n}\r\n\r\ninterface Measurement {\r\n  id: number;\r\n  width: number;\r\n  length: number;\r\n  diagonalA: number;\r\n  diagonalB: number;\r\n  date: string;\r\n}\r\n\r\nconst EvolutionScreen: React.FC = () => {\r\n  const route = useRoute();\r\n  const { patientId } = route.params as RouteParams;\r\n  const { getPatientMeasurements } = useApi();\r\n  const [measurements, setMeasurements] = useState<Measurement[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    loadMeasurements();\r\n  }, [patientId]);\r\n\r\n  const loadMeasurements = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const data = await getPatientMeasurements(patientId);\r\n      setMeasurements(data);\r\n    } catch (error) {\r\n      Alert.alert('Erro', 'Não foi possível carregar as medições do paciente');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const renderMeasurement = ({ item }: { item: Measurement }) => (\r\n    <View style={styles.measurementItem}>\r\n      <Text style={styles.measurementDate}>Data: {item.date}</Text>\r\n      <Text>Largura: {item.width} mm</Text>\r\n      <Text>Comprimento: {item.length} mm</Text>\r\n      <Text>Diagonal A: {item.diagonalA} mm</Text>\r\n      <Text>Diagonal B: {item.diagonalB} mm</Text>\r\n    </View>\r\n  );\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Evolução das Medições</Text>\r\n      {loading ? (\r\n        <ActivityIndicator size=\"large\" color=\"#6200ee\" />\r\n      ) : (\r\n        <FlatList\r\n          data={measurements}\r\n          keyExtractor={(item) => item.id.toString()}\r\n          renderItem={renderMeasurement}\r\n          contentContainerStyle={styles.listContainer}\r\n          ListEmptyComponent={<Text style={styles.emptyText}>Nenhuma medição encontrada</Text>}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 16,\r\n    backgroundColor: '#fff',\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n    marginBottom: 16,\r\n    color: '#6200ee',\r\n  },\r\n  listContainer: {\r\n    paddingBottom: 16,\r\n  },\r\n  measurementItem: {\r\n    padding: 16,\r\n    marginBottom: 12,\r\n    backgroundColor: '#f9f9f9',\r\n    borderRadius: 8,\r\n    borderWidth: 1,\r\n    borderColor: '#ddd',\r\n  },\r\n  measurementDate: {\r\n    fontWeight: 'bold',\r\n    marginBottom: 8,\r\n  },\r\n  emptyText: {\r\n    textAlign: 'center',\r\n    color: '#888',\r\n    marginTop: 20,\r\n  },\r\n});\r\n\r\nexport default EvolutionScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}