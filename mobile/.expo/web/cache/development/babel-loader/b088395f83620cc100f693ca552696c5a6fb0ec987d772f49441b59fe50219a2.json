{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { useRoute, useNavigation } from '@react-navigation/native';\nimport { useApi } from \"../contexts/ApiContext\";\nimport TimelineChart from \"../components/TimelineChart\";\nimport ClassificationCard from \"../components/ClassificationCard\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ProgressChartScreen = function ProgressChartScreen() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    patient = _useState2[0],\n    setPatient = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    reportData = _useState4[0],\n    setReportData = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedPatientId = _useState6[0],\n    setSelectedPatientId = _useState6[1];\n  var route = useRoute();\n  var _ref = route.params || {},\n    patientId = _ref.patientId;\n  var _useApi = useApi(),\n    getPatients = _useApi.getPatients,\n    getPatientReport = _useApi.getPatientReport,\n    loading = _useApi.loading,\n    error = _useApi.error;\n  var navigation = useNavigation();\n  useEffect(function () {\n    if (patientId) {\n      setSelectedPatientId(patientId);\n      loadPatientReport(patientId);\n    } else {\n      loadPatients();\n    }\n  }, [patientId]);\n  var loadPatients = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var _patients = yield getPatients();\n        if (_patients && _patients.length > 0) {\n          if (!selectedPatientId) {\n            setSelectedPatientId(_patients[0].id);\n            loadPatientReport(_patients[0].id);\n          }\n        }\n      } catch (error) {\n        Alert.alert('Erro', 'Não foi possível carregar a lista de pacientes');\n      }\n    });\n    return function loadPatients() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var loadPatientReport = function () {\n    var _ref3 = _asyncToGenerator(function* (id) {\n      try {\n        var report = yield getPatientReport(id);\n        setReportData(report);\n        setPatient(report.patient);\n      } catch (error) {\n        Alert.alert('Erro', 'Não foi possível carregar o relatório do paciente');\n      }\n    });\n    return function loadPatientReport(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var handleSelectPatient = function handleSelectPatient(patientId) {\n    setSelectedPatientId(patientId);\n    loadPatientReport(patientId);\n    setPatient(null);\n  };\n  if (loading && !reportData) {\n    return _jsx(View, {\n      style: styles.loadingContainer,\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#4CAF50\"\n      })\n    });\n  }\n  if (error) {\n    return _jsxs(View, {\n      style: styles.errorContainer,\n      children: [_jsx(Text, {\n        style: styles.errorText,\n        children: \"Erro ao carregar dados\"\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate('PatientList', {\n            onSelect: function onSelect(patientId) {\n              return handleSelectPatient(patientId);\n            }\n          });\n        },\n        children: _jsx(Text, {\n          style: styles.changePatient,\n          children: \"Alterar\"\n        })\n      })]\n    });\n  }\n  if (!reportData || !reportData.measurements || reportData.measurements.length < 2) {\n    return _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(View, {\n        style: styles.patientSelector,\n        children: patient ? _jsxs(View, {\n          style: styles.patientInfo,\n          children: [_jsx(Text, {\n            style: styles.patientLabel,\n            children: \"Paciente:\"\n          }), _jsx(Text, {\n            style: styles.patientName,\n            children: patient.name\n          }), _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              return navigation.navigate('PatientList', {\n                onSelect: function onSelect(patientId) {\n                  return handleSelectPatient(patientId);\n                }\n              });\n            },\n            children: _jsx(Text, {\n              style: styles.changePatient,\n              children: \"Alterar\"\n            })\n          })]\n        }) : _jsx(TouchableOpacity, {\n          style: styles.selectPatientButton,\n          onPress: handleSelectPatient,\n          children: _jsx(Text, {\n            style: styles.selectPatientText,\n            children: \"Selecione um paciente\"\n          })\n        })\n      }), _jsxs(View, {\n        style: styles.noDataContainer,\n        children: [_jsx(Text, {\n          style: styles.noDataText,\n          children: patient ? 'São necessárias pelo menos duas medições para gerar o gráfico de evolução' : 'Selecione um paciente para visualizar o gráfico de evolução'\n        }), patient && _jsx(TouchableOpacity, {\n          style: styles.addMeasurementButton,\n          onPress: function onPress() {\n            return navigation.navigate('Report', {\n              patientId: Number(patient.id)\n            });\n          },\n          children: _jsx(Text, {\n            style: styles.addMeasurementText,\n            children: \"Adicionar Medi\\xE7\\xE3o\"\n          })\n        })]\n      })]\n    });\n  }\n  return _jsx(ScrollView, {\n    style: styles.container,\n    children: _jsxs(View, {\n      style: styles.content,\n      children: [_jsx(View, {\n        style: styles.patientSelector,\n        children: _jsxs(View, {\n          style: styles.patientInfo,\n          children: [_jsx(Text, {\n            style: styles.patientLabel,\n            children: \"Paciente:\"\n          }), _jsx(Text, {\n            style: styles.patientName,\n            children: patient.name\n          }), _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              return navigation.navigate('PatientList', {\n                onSelect: function onSelect(patientId) {\n                  return handleSelectPatient(patientId);\n                }\n              });\n            },\n            children: _jsx(Text, {\n              style: styles.changePatient,\n              children: \"Alterar\"\n            })\n          })]\n        })\n      }), _jsxs(View, {\n        style: styles.chartContainer,\n        children: [_jsx(Text, {\n          style: styles.sectionTitle,\n          children: \"Evolu\\xE7\\xE3o Temporal\"\n        }), _jsx(TimelineChart, {\n          data: reportData.progressData\n        })]\n      }), _jsxs(View, {\n        style: styles.metricsContainer,\n        children: [_jsx(Text, {\n          style: styles.sectionTitle,\n          children: \"M\\xE9tricas Atuais\"\n        }), _jsxs(View, {\n          style: styles.cardRow,\n          children: [_jsx(View, {\n            style: styles.cardColumn,\n            children: _jsx(ClassificationCard, {\n              title: \"\\xCDndice Craniano (CI)\",\n              value: parseFloat(reportData.latestMeasurement.ci),\n              classification: reportData.latestMeasurement.classification\n            })\n          }), _jsx(View, {\n            style: styles.cardColumn,\n            children: _jsx(ClassificationCard, {\n              title: \"CVAI\",\n              value: parseFloat(reportData.latestMeasurement.cvai),\n              classification: reportData.latestMeasurement.classification,\n              unit: \"%\"\n            })\n          })]\n        })]\n      }), _jsx(TouchableOpacity, {\n        style: styles.reportButton,\n        onPress: function onPress() {\n          return navigation.navigate('Report', {\n            patientId: patient.id\n          });\n        },\n        children: _jsx(Text, {\n          style: styles.reportButtonText,\n          children: \"Ver Relat\\xF3rio Completo\"\n        })\n      })]\n    })\n  });\n};\nvar PatientListScreen = function PatientListScreen(_ref4) {\n  var route = _ref4.route,\n    navigation = _ref4.navigation;\n  var onSelect = route.params.onSelect;\n  var handlePatientSelect = function handlePatientSelect(patientId) {\n    if (onSelect) {\n      onSelect(patientId);\n    }\n    navigation.goBack();\n  };\n  return _jsx(FlatList, {\n    data: patients,\n    keyExtractor: function keyExtractor(item) {\n      return item.id.toString();\n    },\n    renderItem: function renderItem(_ref5) {\n      var item = _ref5.item;\n      return _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return handlePatientSelect(item.id);\n        },\n        children: _jsx(Text, {\n          children: item.name\n        })\n      });\n    }\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5'\n  },\n  content: {\n    padding: 16\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  errorText: {\n    fontSize: 16,\n    color: '#d32f2f',\n    marginBottom: 16,\n    textAlign: 'center'\n  },\n  retryButton: {\n    backgroundColor: '#4CAF50',\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 5\n  },\n  retryButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  patientSelector: {\n    marginBottom: 16\n  },\n  patientInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#E8F5E9',\n    borderWidth: 1,\n    borderColor: '#4CAF50',\n    borderRadius: 5,\n    padding: 12\n  },\n  patientLabel: {\n    fontSize: 16,\n    color: '#424242',\n    marginRight: 5\n  },\n  patientName: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#2E7D32',\n    flex: 1\n  },\n  changePatient: {\n    color: '#1976D2',\n    fontSize: 14\n  },\n  selectPatientButton: {\n    backgroundColor: '#E8F5E9',\n    borderWidth: 1,\n    borderColor: '#4CAF50',\n    borderRadius: 5,\n    padding: 12,\n    alignItems: 'center'\n  },\n  selectPatientText: {\n    color: '#2E7D32',\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  noDataContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20\n  },\n  noDataText: {\n    fontSize: 16,\n    color: '#757575',\n    marginBottom: 16,\n    textAlign: 'center'\n  },\n  addMeasurementButton: {\n    backgroundColor: '#4CAF50',\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 5\n  },\n  addMeasurementText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  chartContainer: {\n    backgroundColor: '#fff',\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 16,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n    elevation: 2\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 16,\n    color: '#424242'\n  },\n  metricsContainer: {\n    marginBottom: 16\n  },\n  cardRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  cardColumn: {\n    flex: 1,\n    marginHorizontal: 4\n  },\n  reportButton: {\n    backgroundColor: '#1976D2',\n    padding: 15,\n    borderRadius: 5,\n    alignItems: 'center',\n    marginTop: 8,\n    marginBottom: 24\n  },\n  reportButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold'\n  }\n});\nexport default ProgressChartScreen;","map":{"version":3,"names":["React","useState","useEffect","View","Text","StyleSheet","ScrollView","ActivityIndicator","Alert","TouchableOpacity","FlatList","useRoute","useNavigation","useApi","TimelineChart","ClassificationCard","jsx","_jsx","jsxs","_jsxs","ProgressChartScreen","_useState","_useState2","_slicedToArray","patient","setPatient","_useState3","_useState4","reportData","setReportData","_useState5","_useState6","selectedPatientId","setSelectedPatientId","route","_ref","params","patientId","_useApi","getPatients","getPatientReport","loading","error","navigation","loadPatientReport","loadPatients","_ref2","_asyncToGenerator","patients","length","id","alert","apply","arguments","_ref3","report","_x","handleSelectPatient","style","styles","loadingContainer","children","size","color","errorContainer","errorText","onPress","navigate","onSelect","changePatient","measurements","container","patientSelector","patientInfo","patientLabel","patientName","name","selectPatientButton","selectPatientText","noDataContainer","noDataText","addMeasurementButton","Number","addMeasurementText","content","chartContainer","sectionTitle","data","progressData","metricsContainer","cardRow","cardColumn","title","value","parseFloat","latestMeasurement","ci","classification","cvai","unit","reportButton","reportButtonText","PatientListScreen","_ref4","handlePatientSelect","goBack","keyExtractor","item","toString","renderItem","_ref5","create","flex","backgroundColor","padding","justifyContent","alignItems","fontSize","marginBottom","textAlign","retryButton","paddingVertical","paddingHorizontal","borderRadius","retryButtonText","fontWeight","flexDirection","borderWidth","borderColor","marginRight","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","marginHorizontal","marginTop"],"sources":["C:/Users/Davi/Desktop/projetos/cranial-app/cranial-app/mobile/src/screens/ProgressChartScreen.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  View, \n  Text, \n  StyleSheet, \n  ScrollView, \n  ActivityIndicator, \n  Alert,\n  TouchableOpacity,\n  FlatList\n} from 'react-native';\nimport { useRoute, useNavigation } from '@react-navigation/native';\nimport { useApi } from '../contexts/ApiContext';\nimport TimelineChart from '../components/TimelineChart';\nimport ClassificationCard from '../components/ClassificationCard';\n\ninterface RouteParams {\n  patientId?: number;\n}\n\nconst ProgressChartScreen: React.FC = () => {\n  const [patient, setPatient] = useState<any>(null);\n  const [reportData, setReportData] = useState<any>(null);\n  const [selectedPatientId, setSelectedPatientId] = useState<number | null>(null);\n  \n  const route = useRoute();\n  const { patientId } = route.params as RouteParams || {};\n  const { getPatients, getPatientReport, loading, error } = useApi();\n  const navigation = useNavigation();\n\n  useEffect(() => {\n    if (patientId) {\n      setSelectedPatientId(patientId);\n      loadPatientReport(patientId);\n    } else {\n      loadPatients();\n    }\n  }, [patientId]);\n\n  const loadPatients = async () => {\n    try {\n      const patients = await getPatients();\n      if (patients && patients.length > 0) {\n        // Se não tiver paciente selecionado, seleciona o primeiro\n        if (!selectedPatientId) {\n          setSelectedPatientId(patients[0].id);\n          loadPatientReport(patients[0].id);\n        }\n      }\n    } catch (error) {\n      Alert.alert('Erro', 'Não foi possível carregar a lista de pacientes');\n    }\n  };\n\n  const loadPatientReport = async (id: number) => {\n    try {\n      const report = await getPatientReport(id);\n      setReportData(report);\n      setPatient(report.patient);\n    } catch (error) {\n      Alert.alert('Erro', 'Não foi possível carregar o relatório do paciente');\n    }\n  };\n\n  const handleSelectPatient = (patientId: number) => {\n    setSelectedPatientId(patientId); // Atualiza o ID do paciente selecionado\n    loadPatientReport(patientId); // Carrega os dados do novo paciente\n    setPatient(null); // Limpa os dados do paciente anterior enquanto carrega os novos\n  };\n\n  if (loading && !reportData) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color=\"#4CAF50\" />\n      </View>\n    );\n  }\n\n  if (error) {\n    return (\n      <View style={styles.errorContainer}>\n        <Text style={styles.errorText}>Erro ao carregar dados</Text>\n        <TouchableOpacity\n          onPress={() =>\n            navigation.navigate('PatientList', {\n              onSelect: (patientId: number) => handleSelectPatient(patientId),\n            })\n          }\n        >\n          <Text style={styles.changePatient}>Alterar</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  if (!reportData || !reportData.measurements || reportData.measurements.length < 2) {\n    return (\n      <View style={styles.container}>\n        <View style={styles.patientSelector}>\n          {patient ? (\n            <View style={styles.patientInfo}>\n              <Text style={styles.patientLabel}>Paciente:</Text>\n              <Text style={styles.patientName}>{patient.name}</Text>\n              <TouchableOpacity\n                onPress={() =>\n                  navigation.navigate('PatientList', {\n                    onSelect: (patientId: number) => handleSelectPatient(patientId),\n                  })\n                }\n              >\n                <Text style={styles.changePatient}>Alterar</Text>\n              </TouchableOpacity>\n            </View>\n          ) : (\n            <TouchableOpacity \n              style={styles.selectPatientButton}\n              onPress={handleSelectPatient}\n            >\n              <Text style={styles.selectPatientText}>Selecione um paciente</Text>\n            </TouchableOpacity>\n          )}\n        </View>\n        \n        <View style={styles.noDataContainer}>\n          <Text style={styles.noDataText}>\n            {patient \n              ? 'São necessárias pelo menos duas medições para gerar o gráfico de evolução'\n              : 'Selecione um paciente para visualizar o gráfico de evolução'}\n          </Text>\n          {patient && (\n            <TouchableOpacity \n              style={styles.addMeasurementButton}\n              onPress={() => navigation.navigate('Report', { patientId: Number(patient.id) })}\n            >\n              <Text style={styles.addMeasurementText}>Adicionar Medição</Text>\n            </TouchableOpacity>\n          )}\n        </View>\n      </View>\n    );\n  }\n\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.content}>\n        <View style={styles.patientSelector}>\n          <View style={styles.patientInfo}>\n            <Text style={styles.patientLabel}>Paciente:</Text>\n            <Text style={styles.patientName}>{patient.name}</Text>\n            <TouchableOpacity\n              onPress={() =>\n                navigation.navigate('PatientList', {\n                  onSelect: (patientId: number) => handleSelectPatient(patientId),\n                })\n              }\n            >\n              <Text style={styles.changePatient}>Alterar</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n        \n        <View style={styles.chartContainer}>\n          <Text style={styles.sectionTitle}>Evolução Temporal</Text>\n          <TimelineChart data={reportData.progressData} />\n        </View>\n        \n        <View style={styles.metricsContainer}>\n          <Text style={styles.sectionTitle}>Métricas Atuais</Text>\n          <View style={styles.cardRow}>\n            <View style={styles.cardColumn}>\n              <ClassificationCard\n                title=\"Índice Craniano (CI)\"\n                value={parseFloat(reportData.latestMeasurement.ci)}\n                classification={reportData.latestMeasurement.classification}\n              />\n            </View>\n            <View style={styles.cardColumn}>\n              <ClassificationCard\n                title=\"CVAI\"\n                value={parseFloat(reportData.latestMeasurement.cvai)}\n                classification={reportData.latestMeasurement.classification}\n                unit=\"%\"\n              />\n            </View>\n          </View>\n        </View>\n        \n        <TouchableOpacity \n          style={styles.reportButton}\n          onPress={() => navigation.navigate('Report', { patientId: patient.id })}\n        >\n          <Text style={styles.reportButtonText}>Ver Relatório Completo</Text>\n        </TouchableOpacity>\n      </View>\n    </ScrollView>\n  );\n};\n\nconst PatientListScreen: React.FC = ({ route, navigation }) => {\n  const { onSelect } = route.params;\n\n  const handlePatientSelect = (patientId: number) => {\n    if (onSelect) {\n      onSelect(patientId); // Retorna o ID do paciente selecionado\n    }\n    navigation.goBack(); // Volta para a tela anterior\n  };\n\n  return (\n    <FlatList\n      data={patients}\n      keyExtractor={(item) => item.id.toString()}\n      renderItem={({ item }) => (\n        <TouchableOpacity onPress={() => handlePatientSelect(item.id)}>\n          <Text>{item.name}</Text>\n        </TouchableOpacity>\n      )}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n  content: {\n    padding: 16,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  errorText: {\n    fontSize: 16,\n    color: '#d32f2f',\n    marginBottom: 16,\n    textAlign: 'center',\n  },\n  retryButton: {\n    backgroundColor: '#4CAF50',\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 5,\n  },\n  retryButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  patientSelector: {\n    marginBottom: 16,\n  },\n  patientInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#E8F5E9',\n    borderWidth: 1,\n    borderColor: '#4CAF50',\n    borderRadius: 5,\n    padding: 12,\n  },\n  patientLabel: {\n    fontSize: 16,\n    color: '#424242',\n    marginRight: 5,\n  },\n  patientName: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#2E7D32',\n    flex: 1,\n  },\n  changePatient: {\n    color: '#1976D2',\n    fontSize: 14,\n  },\n  selectPatientButton: {\n    backgroundColor: '#E8F5E9',\n    borderWidth: 1,\n    borderColor: '#4CAF50',\n    borderRadius: 5,\n    padding: 12,\n    alignItems: 'center',\n  },\n  selectPatientText: {\n    color: '#2E7D32',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  noDataContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  noDataText: {\n    fontSize: 16,\n    color: '#757575',\n    marginBottom: 16,\n    textAlign: 'center',\n  },\n  addMeasurementButton: {\n    backgroundColor: '#4CAF50',\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 5,\n  },\n  addMeasurementText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  chartContainer: {\n    backgroundColor: '#fff',\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n    elevation: 2,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 16,\n    color: '#424242',\n  },\n  metricsContainer: {\n    marginBottom: 16,\n  },\n  cardRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  cardColumn: {\n    flex: 1,\n    marginHorizontal: 4,\n  },\n  reportButton: {\n    backgroundColor: '#1976D2',\n    padding: 15,\n    borderRadius: 5,\n    alignItems: 'center',\n    marginTop: 8,\n    marginBottom: 24,\n  },\n  reportButtonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n});\n\nexport default ProgressChartScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}